package com.douncoding.readingsalon.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.douncoding.readingsalon.dao.Contents;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONTENTS".
*/
public class ContentsDao extends AbstractDao<Contents, Long> {

    public static final String TABLENAME = "CONTENTS";

    /**
     * Properties of entity Contents.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Type = new Property(1, Integer.class, "type", false, "TYPE");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Content = new Property(3, String.class, "content", false, "CONTENT");
        public final static Property Subject = new Property(4, String.class, "subject", false, "SUBJECT");
        public final static Property Overview = new Property(5, String.class, "overview", false, "OVERVIEW");
        public final static Property Image = new Property(6, String.class, "image", false, "IMAGE");
        public final static Property View = new Property(7, Integer.class, "view", false, "VIEW");
        public final static Property CreateAt = new Property(8, java.util.Date.class, "createAt", false, "CREATE_AT");
        public final static Property UpdateAt = new Property(9, java.util.Date.class, "updateAt", false, "UPDATE_AT");
    };

    private DaoSession daoSession;


    public ContentsDao(DaoConfig config) {
        super(config);
    }
    
    public ContentsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONTENTS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TYPE\" INTEGER," + // 1: type
                "\"TITLE\" TEXT," + // 2: title
                "\"CONTENT\" TEXT," + // 3: content
                "\"SUBJECT\" TEXT," + // 4: subject
                "\"OVERVIEW\" TEXT," + // 5: overview
                "\"IMAGE\" TEXT," + // 6: image
                "\"VIEW\" INTEGER," + // 7: view
                "\"CREATE_AT\" INTEGER," + // 8: createAt
                "\"UPDATE_AT\" INTEGER);"); // 9: updateAt
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONTENTS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Contents entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(2, type);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
 
        String subject = entity.getSubject();
        if (subject != null) {
            stmt.bindString(5, subject);
        }
 
        String overview = entity.getOverview();
        if (overview != null) {
            stmt.bindString(6, overview);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(7, image);
        }
 
        Integer view = entity.getView();
        if (view != null) {
            stmt.bindLong(8, view);
        }
 
        java.util.Date createAt = entity.getCreateAt();
        if (createAt != null) {
            stmt.bindLong(9, createAt.getTime());
        }
 
        java.util.Date updateAt = entity.getUpdateAt();
        if (updateAt != null) {
            stmt.bindLong(10, updateAt.getTime());
        }
    }

    @Override
    protected void attachEntity(Contents entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Contents readEntity(Cursor cursor, int offset) {
        Contents entity = new Contents( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // content
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // subject
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // overview
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // image
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // view
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // createAt
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)) // updateAt
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Contents entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSubject(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOverview(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setImage(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setView(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setCreateAt(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setUpdateAt(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Contents entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Contents entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
